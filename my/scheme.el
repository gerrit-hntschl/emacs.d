(add-to-list 'auto-mode-alist '("\\.scss$" . scheme-mode))
(add-to-list 'auto-mode-alist '("\\.sxml$" . scheme-mode))
(add-to-list 'auto-mode-alist '("\\.setup$" . scheme-mode))
(add-to-list 'auto-mode-alist '("\\.meta$" . scheme-mode))
(add-to-list 'auto-mode-alist '("\\.release-info$" . scheme-mode))
(add-to-list 'auto-mode-alist '("\\.system$" . scheme-mode))

(eval-after-load 'scheme
  '(progn
     (add-hook 'scheme-mode-hook
	       (lambda () 
		 (show-paren-mode t)
		 (paredit-mode t)))

     (setq scheme-program-name "~/.rbenv/shims/csi -n")
     
     (defun scheme-send-buffer ()
       (interactive)
       (save-excursion
	 (scheme-send-region (point-min) (point-max))))
     
     (define-key scheme-mode-map (kbd "C-c C-b") 'scheme-send-buffer)
     
     (defun scheme-module-indent (state indent-point normal-indent) 0)

     (put 'module 'scheme-indent-function 'scheme-module-indent)
     (put 'parameterize 'scheme-indent-function 1)
     (put 'receive 'scheme-indent-function 2)
     (put 'when 'scheme-indent-function 1)
     (put 'unless 'scheme-indent-function 1)
     (put 'let-optionals 'scheme-indent-function 2)
     (put 'call-with-input-string 'scheme-indent-function 1)
     (put 'with-input-from-string 'scheme-indent-function 1)
     (put 'call-with-input-pipe 'scheme-indent-function 1)
     (put 'with-input-from-pipe 'scheme-indent-function 1)
     (put 'call-with-output-string 'scheme-indent-function 1)
     (put 'with-output-to-string 'scheme-indent-function 1)
     (put 'call-with-output-pipe 'scheme-indent-function 1)
     (put 'with-output-to-pipe 'scheme-indent-function 1)
     (put 'test-group 'scheme-indent-function 1)
     (put 'test 'scheme-indent-function 0)
     (put 'regex-case 'scheme-indent-function 1)
     (put 'and-let* 'scheme-indent-function 1)
     (put 'let-values 'scheme-indent-function 1)
     (put 'let*-values 'scheme-indent-function 1)
     (put 'with-headers 'scheme-indent-function 1)
     (put 'match-let 'scheme-indent-function 1)
     (put 'match 'scheme-indent-function 1)
     (put 'http-accept-case 'scheme-indent-function 1)
     (put 'wrap-defstruct-multi-assignment 'scheme-indent-function 1)
     (put 'with-output-to-process 'scheme-indent-function 1)
     (put 'with-request-vars 'scheme-indent-function 2)
     (put 'with-request-vars* 'scheme-indent-function 2)
     (put 'with-request-variables 'scheme-indent-function 1)
     (put 'with-input-from-request 'scheme-indent-function 2)
     (put 'call-with-input-from-request 'scheme-indent-function 2)
     (put 'call-with-returning 'scheme-indent-function 1)
     (put 'with-input-from-source-file 'scheme-indent-function 1)
     (put 'with-input-for-compilation 'scheme-indent-function 1)
     (put 'call-with-sql-engine 'scheme-indent-function 1)
     (put 'call-with-value-from-pool 'scheme-indent-function 1)
     (put 'call-with-value-from-pool-in-thread 'scheme-indent-function 1)
     (put 'with-connection 'scheme-indent-function 1)
     (put 'with-transaction 'scheme-indent-function 1)
     (put 'register-handler 'scheme-indent-function 1)
     (put 'let-optionals* 'scheme-indent-function 2)
     (put 'call-with-connection 'scheme-indent-function 2)
     (put 'condition-case 'scheme-indent-function 1)
     (put 'select 'scheme-indent-function 1)
     (put 'http-match 'scheme-indent-function 1)
     (put 'let-location 'scheme-indent-function 1)
     (put 'generic-let 'scheme-indent-function 1)
     (put 'handle-exceptions 'scheme-indent-function 1)
     (put 'with 'scheme-indent-function 1)
     (put 'activity 'scheme-indent-function 1)
     (put 'familiar-lambda 'scheme-indent-function 2)
     (put 'foreign-lambda 'scheme-indent-function 2)
     (put 'foreign-lambda* 'scheme-indent-function 2)
     (put 'let-redis 'scheme-indent-function 1)
     (put 'describe 'scheme-indent-function 1)
     (put 'context 'scheme-indent-function 1)
     (put 'define/let 'scheme-indent-function 1)
     (put 'with-exclusive-transaction 'scheme-indent-function 1)))
